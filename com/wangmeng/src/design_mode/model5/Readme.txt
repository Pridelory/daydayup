一、代理设计模式
1、定义：为其他对象提供一种代理以控制对这个对象的访问

2、代理UML：见本包图片

3、代理模式的功能：
代理模式是通过创建一个代理对象，用这个代理对象去代表真实的对象，客户端得到这个代理对象过后，对客户端没有什么影响，就跟得到了真实对象一样来使用。
当客户端操作这个代理对象的时候，实际上功能最终还是会由真实的对象来完成，只不过是通过代理操作的，也就是客户端操作代理，代理操作真正的对象。
正是因为有代理对象夹在客户端和被代理的真实对象中间，相当于一个中转，那么在中转的时候就有很多花招可以玩，比如：判断一下权限，如果没有足够的权限那
就不给你中转了，等等。

4、代理的分类
虚代理、远程代理、copy-on-write代理、保护代理、Cache代理、防火墙代理、同步代理、智能指引


二、动态代理

静态代理，就是在编译时期代理对象已经写好，并生成class文件。
动态代理，就是动态生成代理对象。在运行时期通过反射生成代理对象。通常把使用Java内建的对代理模式支持的功能来实现的代理称为Java的动态代理
注：核心就是代理对象

Java的动态代理目前只能代理接口，基本的实现是依靠Java的反射机制和动态生成class的技术，来动态生成被代理的接口的实现对象。
如果要实现类的代理，可以使用cglib（一个开源的Code Generation Library）。
Java的动态代理还是实现AOP（面向方面编程）的一个重要手段
主要就是newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)这个方法，
这就相当于一个工厂，来New一个代理类。
1、其中loader也就是类加载器，用户决定哪个类加载器用来加载代理类到虚拟机中。
2、interfaces定义生成的代理类的实现的接口，以及实现的方法。
3、h这个是用户自定义的处理，即对被代理类施加什么样的动作。可以通用


三、相关模式

1、代理模式和适配器模式
这两个模式有一定的相似性，但也有差异。

这两个模式有相似性，它们都为另一个对象提供间接性的访问，而且都是从自身以外的一个接口向这个对象转发请求。

但是从功能上，两个模式是不一样的。适配器模式主要用来解决接口之间不匹配的问题，它通常是为所适配的对象提供一个不同的接口；而代理模式会实现和目标对象相同的接口。

2、代理模式和装饰模式
这两个模式从实现上相似，但是功能上是不同的。

装饰模式的实现和保护代理的实现上是类似的，都是在转调其它对象的前后执行一定的功能。但是它们的目的和功能都是不同的。

装饰模式的目的是为了让你不生成子类就可以给对象添加职责，也就是为了动态的增加功能；而代理模式的主要目的是控制对对象的访问。


着重看ProxyGenerator.class和JdkDynamicAopProxy文件

面试的两个问题：
1、Spring的事务注解是怎么实现的！！！！


